usethis::use_directory("man")
usethis::use_directory("tests")
usethis::use_testthat()  # Sets up `tests/testthat/` for unit tests
list.files("path/to/yourpackage", recursive = TRUE)
devtools::check()
devtools::document()
devtools::check()
devtools::check()
use_mit_license()
use_gpl3_license()
usethis::use_mit_license("Allen Martin")  # or `use_gpl3_license()` for GPL-3
usethis::use_import_from("stats", c("pexp", "pnorm", "qnorm", "t.test"))
usethis::use_testthat()
usethis::use_test("functions")
devtools::document()
devtools::check()
install.packages("allenprob/allenprob_0.0.0.9000.tar.gz", repos = NULL, type = "source")
R CMD check
install.packages("remotes")
git init
install.packages("roxygen2")
library(roxygen2)
devtools::document()
devtools::document()
devtools::document()
document()
library(devtools)
document()
build()
install.packages("remotes")
remotes::install_github("roninkinetic/allenprob")
allenprob::calculate_exponential_probability(3,5,6)
allenprob::calculate_exponential_probability(3,6,5)
allenprob::calculate_exponential_probability(1/3,6,5)
allenprob::calculate_exponential_probability(1/3,5,6)
?allenprob
(1/36)*exp(-((x^2)/(7^2)))
(1/36)*exp(-((1^2)/(7^2)))
((7/3)^2)/49
pexp(9,1/6)
pexp(1/6,9)
1-pexep(1/6,9)
1-pexp(1/6,9)
allenprob::calculate_probability_cost_less_than(89,23,45)
qnorm(55.4)
pnorm(55.4)
allenprob::find_x_value(20,15,55.40)
1-pnorm(55.4,20,15)
qnorm(0.46)
allenprob::calculate_sample_mean_probability(2460,500,81,2600)
allenprob::calculate_confidence_interval(5.9,.1,24,.9)
allenprob::p <- 0.67      # population proportion
p <- 0.67      # population proportion
n <- 64        # sample size
# Mean of the sampling distribution
mean_sampling_distribution <- p
# Standard deviation (standard error) of the sampling distribution
standard_deviation_sampling_distribution <- sqrt((p * (1 - p)) / n)
document()
devtools::document()
build()
devtools::build()
devtools::build(path="c:\allenprob")
devtools::build(path="c:\allenprob\")
devtools::build(path="c:\allenprob\")
devtools::build(path="c:\allenprob")
hemoglobin <- c(14.20.15,22,20,17,21,19,19,21,15,16)
hemoglobin <- c(14,20,15,22,20,17,21,19,19,21,15,16)
allenprob::calculate_p_value_greater_than(hemoglobin,mean(hemoglin),)
allenprob::calculate_p_value_greater_than(hemoglobin,mean(hemoglobin),.05)
mean(hemoglobin)
allenprob::calculate_p_value_greater_than(hemoglobin,18.25,.05)
allenprob::calculate_p_value_greater_than(hemoglobin,18.25,.95)
allenprob::calculate_p_value_greater_than(hemoglobin,18.25,.05)
allenprob::calculate_p_value_greater_than(hemoglobin,18.25,5)
allenprob::calculate_p_value_greater_than(hemoglobin,18.25,5%)
allenprob::calculate_p_value_greater_than(hemoglobin,18.25,.05)
allenprob::calculate_p_value_greater_than(hemoglobin,14,.05)
allenprob::calculate_proportion_confidence_interval(83,100,.99)
allenprob::calculate_proportion_confidence_interval(100,45,.99)
allenprob::calculate_proportion_confidence_interval(100,45,0.99)
allenprob::hypothesis_test_proportion(100,45,0.01)
allenprob::hypothesis_test_proportion(100,45,1)
allenprob::hypothesis_test_proportion(100,45,.01)
allenprob::hypothesis_test_proportion(100,50,.01)
allenprob::calculate_proportion_confidence_interval(10,100,.99)
devtools::document(
)
document()
devtools::document()
devtools::build()
devtools::build()
allenprob::calculate_sample_size_for_proportion()
install()
check()
library(devtools)
check()
build("c:\allenprob")
build()
install()
allenprob::calculate_sample_size_for_proportion(.1,.99,.13)
allenprob::find_x_value(13,3,0.05)
integrate((x/25)exp(-((x^2)/50)),0,1)
exp_function <- function(x) {}
exp_function <- function(x) { (x/25)exp(-((x^2)/50)) }
exp_function <- function(x) { return((x/25)exp(-((x^2)/50))) }
exp_function <- function(x) { return((x/25)*exp(-((x^2)/50))) }
integrate(exp_function,0,1)
(1.75^2)/4
((1.75^2)/4) - ((0.5^2)/4)
pexp(9,1/6)
1-pexp(9,1/6)
pnorm(4,15,9)
1-pnorm(4,15,9)
allenprob::find_x_value(10,2,14.9)
qnorm(14.90)
qnorm(0.993)
qnorm(0.007,10,2)
qnorm(0.993,10,2)
qnorm(0.994,10,2)
qnorm(0.493,10,2)
qnorm(0.496,10,2)
qnorm(0.993,10,2)
qnorm(14.9,10,2)
pnorm(14.9,10,2)
qnorm(0.74)
allenprob::calculate_probability_mean_less_than_or_equal(12,.12,1024,11.994)
allenprob::calculate_confidence_interval(5.6,.1,23,.9)
hemoglobin <- c(14,19,16,14,19,19,14,21,17,17,14,17)
allenprob::calculate_p_value_greater_than(hemoglobin,14,.05)
allenprob::calculate_proportion_confidence_interval(.84,36,.95)
allenprob::calculate_proportion_confidence_interval(30.24,36,.95)
allenprob::hypothesis_test_proportion(100,44,.01)
allenprob::calculate_proportion_confidence_interval(24,115,.97)
pnorm(0.05,10,4)
allenprob::find_x_value(10,4,0.05)
document()
load("devtools")
install.packages(devtools)
install.packages("devtools")
document()
library(devtools)
document()  # To update documentation
build()     # To build the package
library(devtools)
document()  # To update documentation
build(/allenprob)     # To build the package
library(devtools)
document()  # To update documentation
build(/allenprob/)     # To build the package
library(devtools)
document()  # To update documentation
build("/allenprob")     # To build the package
check()
library(roxygen2)
library(devtools)
document()
library(devtools)
document()
check()
library(devtools)
document()
check()
library(devtools)
document()
check()
library(devtools)
document()
check()
library(devtools)
document()
check()
library(devtools)
document()
library(devtools)
document()
check()
library(devtools)
document()
check()
library(devtools)
document()
check()
probability_between_costs(41,107,74,22)
library(devtools)
document()
check()
sampling_distribution_parameters(.74,100)
document()
check()
coin_hypothesis_test(54,100,.01)
exp_func <- function(x) { (x/25)*exp(-((x^2)/50))}
integrate(exp_function,0,1)
integrate(exp_func,0,1)
(1^2)/4
qexp(4,1/2)
pexp(4,1/2)
1-pexp(4,1/2)
allenprob::calculate_probability_cost_less_than(99,26,60)
pnorm(29.18,20,6)-pnorm(13.82,20,6)
qnorm(0.55)
allenprob::calculate_probability_mean_less_than_or_equal(16,.16,1444,15.992)
document()
check()
check()
document()
check()
allenprob::sample_proportion_prob(.94,169,1)
hemoglobin <- c(17,19,17,17,21,15,22,16,19,19,17,14)
allenprob::calculate_p_value_greater_than(hemoglobin,14,.05)
allenprob::calculate_p_value_greater_than(hemoglobin,14,.95)
allenprob::calculate_p_value_greater_than(hemoglobin,14,.85)
allenprob::calculate_proportion_confidence_interval(84,100,.98)
allenprob::coin_hypothesis_test(56,100,0.01)
allenprob::calculate_proportion_confidence_interval(22,109,.97)
allenprob::find_x_value(10,4,0.05)
document()
check()
allenprob::calculate_p_value_greater_than(hemoglobin,14,.05)
allenprob::calculate_p_value_greater_than(hemoglobin,14,.05)
document()
devtools()
library(devtools)
document()
uniform_distribution(5,1,8)-uniform_distribution(2,1,8)
uniform_distribution(5,1,8)
uniform_distribution(4,1,8)
uniform_distribution(2,1,8)
uniform_distribution(5,1,8)
document()
uniform_distribution(5,1,8)
document()
x <- c(2,5)
uniform_distribution(x,1,8)
document()
document()
document()
gamma_with_mean_and_var(6,12,12)
document()
document()
document()
pnorm
qnorm
pnorm(100,67,36)
calculate_confidence_interval(64.3,6,50,.99)
calculate_probability_mean_less_than_or_equal(12,0.4,50,11.9)
document()
document()
drink <- c(299.4,297.7,301.0,298.9,300.2,297)
calculate_p_value_greater_than(drink,mean(drink),0.05)
calculate_confidence_interval(mean(drink),sd(drink),length(drink),.99)
document()
error_explanation("The team will not get the first down if they go for it","The team will get the first down if they go for it")
error_explanation("The team will not get the first down if they go for it","The team will get the first down if they go for it","Type I")
document()
devtools(build)
build()
document()
devtools()
package(devtools)
load(devltools)
load(devtools)
install.package(devtools)
install.packages(devtools)
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
tools::showNonASCIIfile("R/functions.R")
tools::showNonASCIIfile("R/functions.R")
tools::showNonASCIIfile("R/functions.R")
tools::showNonASCIIfile("R/functions.R")
tools::showNonASCIIfile("R/functions.R")
tools::showNonASCIIfile("R/functions.R")
tools::showNonASCIIfile("R/functions.R")
tools::showNonASCIIfile("R/functions.R")
tools::showNonASCIIfile("R/functions.R")
tools::showNonASCIIfile("R/functions.R")
tools::showNonASCIIfile("R/functions.R")
tools::showNonASCIIfile("R/functions.R")
tools::showNonASCIIfile("R/functions.R")
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(devtools)
document()
build()
build("/allenprob")
build("c:\")
build("c:")
build("/")
build("\")
build()
library(devtools)
devtools::build()
remotes::install_github("roninkinetic/allenprob")
library(allenprob)
document()
document()
devtools::document()
hypothesis_test_approval(100,54)
devtools::document()
hypothesis_test_approval(100,54)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::build()
hypothesis_test_approval(100,54)
remotes::install_github("roninkinetic/allenprob")
library(allenprob)
help(allenprob)
devtools::document()
devtools::build()
devtools::document()
devtools::build()
remotes::install_github("roninkinetic/allenprob")
library(allenprob)
# Define the CDF of X
cdf_x <- function(x) {
if (x < -1) return(0)
if (x > 1) return(1)
return(0.5 * x + 0.5)
}
# Calculate E[Y] with detailed steps
expected_value_y_detailed(a = 8, b = 6, cdf = cdf_x, lower_bound = 0, upper_bound = 1, cutoff_point = 0)
# Define the CDF of X to handle vector inputs
cdf_x <- function(x) {
# Initialize result as a vector of the same length as x
result <- numeric(length(x))
# Apply conditions for each element in x
result[x < -1] <- 0
result[x > 1] <- 1
result[x >= -1 & x <= 1] <- 0.5 * x[x >= -1 & x <= 1] + 0.5
return(result)
}
# Use the previously defined `expected_value_y_detailed` function
expected_value_y_detailed(a = 8, b = 6, cdf = cdf_x, lower_bound = 0, upper_bound = 1, cutoff_point = 0)
devtools::document()
devtools::document()
devtools::build()
clear()
# Define the CDF of X to handle vector inputs
cdf_x <- function(x) {
# Initialize result as a vector of the same length as x
result <- numeric(length(x))
# Apply conditions for each element in x
result[x < -1] <- 0
result[x > 1] <- 1
result[x >= -1 & x <= 1] <- 0.5 * x[x >= -1 & x <= 1] + 0.5
return(result)
}
# Use the previously defined `expected_value_y_detailed` function
expected_value_y_detailed(a = 8, b = 6, cdf = cdf_x, lower_bound = 0, upper_bound = 1, cutoff_point = 0)
# Use the previously defined `expected_value_y_detailed` function
expected_value_y_detailed(a = 8, b = 6, cdf = cdf_x, lower_bound = 0, upper_bound = 1, cutoff_point = 0)
devtools::document()
pre_scores <- c(30, 30, 29, 23, 29, 30, 24, 32, 28, 16)
post_scores <- c(28, 30, 31, 18, 31, 31, 32, 33, 28, 20)
paired_t_test_pre_post(pre_scores, post_scores, alpha = 0.05, conf_level = 0.90)
devtools::document()
devtools::build()
